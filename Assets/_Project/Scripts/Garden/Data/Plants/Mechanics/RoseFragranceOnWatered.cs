using UnityEngine;

/// <summary>
/// –ú–µ—Ö–∞–Ω–∏–∫–∞ —Ä–æ–∑—ã: —Å–æ–∑–¥–∞–µ—Ç –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –ø–æ–ª–∏–≤–µ, –¥–∞—é—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –∫ –¥–æ—Ö–æ–¥—É
/// </summary>
[CreateAssetMenu(fileName = "RoseFragranceOnWatered", menuName = "Game/Plant Mechanics/Watered/Rose Fragrance")]
public class RoseFragranceOnWatered : OnWateredMechanics
{
    [Header("Fragrance Effect Settings")]
    [SerializeField] private float fragranceDuration = 30f;
    [SerializeField] private float incomeBoostMultiplier = 1.2f;
    [SerializeField] private int affectedRadius = 3;
    [SerializeField] private bool showDebugLog = true;

    public override void Execute(PlantEntity plant)
    {
        if (showDebugLog)
        {
            Debug.Log($"üåπ –†–æ–∑–∞ –ø–æ–ª–∏—Ç–∞! –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç —á–∞—Ä—É—é—â–∏–π –∞—Ä–æ–º–∞—Ç –Ω–∞ {fragranceDuration} —Å–µ–∫—É–Ω–¥...");
        }

        ApplyFragranceEffect(plant);
    }

    private void ApplyFragranceEffect(PlantEntity rose)
    {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        // –í –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
        // 1. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –±–∞—Ñ—Ñ–æ–≤
        // 2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–æ –≤—Å–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è–º –≤ —Ä–∞–¥–∏—É—Å–µ
        // 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ fragranceDuration —Å–µ–∫—É–Ω–¥

        if (showDebugLog)
        {
            Debug.Log($"üíñ –ê—Ä–æ–º–∞—Ç —Ä–æ–∑—ã –ø–æ–≤—ã—à–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ {affectedRadius} –∫–ª–µ—Ç–æ–∫ " +
                     $"–Ω–∞ {(incomeBoostMultiplier - 1f) * 100}% –≤ —Ç–µ—á–µ–Ω–∏–µ {fragranceDuration} —Å–µ–∫—É–Ω–¥!");
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ª–Ω
        ShowFragranceVisualEffect(rose);
    }

    private void ShowFragranceVisualEffect(PlantEntity rose)
    {
        // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä–æ–º–∞—Ç–∞
        // –í–æ–ª–Ω—ã, —á–∞—Å—Ç–∏—Ü—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ —Ç.–¥.

        if (showDebugLog)
        {
            Debug.Log("‚ú® –ê—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ª–Ω—ã —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è –æ—Ç —Ä–æ–∑—ã...");
        }
    }
}